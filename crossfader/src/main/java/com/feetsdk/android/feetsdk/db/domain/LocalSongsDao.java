package com.feetsdk.android.feetsdk.db.domain;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.feetsdk.android.feetsdk.db.domain.table.LocalSongs;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_SONGS".
*/
public class LocalSongsDao extends AbstractDao<LocalSongs, String> {

    public static final String TABLENAME = "LOCAL_SONGS";

    /**
     * Properties of entity LocalSongs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SongId = new Property(0, String.class, "songId", true, "SONG_ID");
        public final static Property SongName = new Property(1, String.class, "songName", false, "SONG_NAME");
        public final static Property CoverImageUrl = new Property(2, String.class, "coverImageUrl", false, "COVER_IMAGE_URL");
        public final static Property Progress = new Property(3, int.class, "progress", false, "PROGRESS");
        public final static Property Mp3Url = new Property(4, String.class, "mp3Url", false, "MP3_URL");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property SingerName = new Property(6, String.class, "singerName", false, "SINGER_NAME");
        public final static Property Tempo = new Property(7, String.class, "tempo", false, "TEMPO");
        public final static Property Size = new Property(8, int.class, "size", false, "SIZE");
        public final static Property Collection = new Property(9, boolean.class, "collection", false, "COLLECTION");
        public final static Property Listener = new Property(10, boolean.class, "listener", false, "LISTENER");
        public final static Property ImgProgress = new Property(11, int.class, "imgProgress", false, "IMG_PROGRESS");
        public final static Property ImgPath = new Property(12, String.class, "imgPath", false, "IMG_PATH");
    }


    public LocalSongsDao(DaoConfig config) {
        super(config);
    }
    
    public LocalSongsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_SONGS\" (" + //
                "\"SONG_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: songId
                "\"SONG_NAME\" TEXT," + // 1: songName
                "\"COVER_IMAGE_URL\" TEXT," + // 2: coverImageUrl
                "\"PROGRESS\" INTEGER NOT NULL ," + // 3: progress
                "\"MP3_URL\" TEXT," + // 4: mp3Url
                "\"PATH\" TEXT," + // 5: path
                "\"SINGER_NAME\" TEXT," + // 6: singerName
                "\"TEMPO\" TEXT," + // 7: tempo
                "\"SIZE\" INTEGER NOT NULL ," + // 8: size
                "\"COLLECTION\" INTEGER NOT NULL ," + // 9: collection
                "\"LISTENER\" INTEGER NOT NULL ," + // 10: listener
                "\"IMG_PROGRESS\" INTEGER NOT NULL ," + // 11: imgProgress
                "\"IMG_PATH\" TEXT);"); // 12: imgPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_SONGS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalSongs entity) {
        stmt.clearBindings();
 
        String songId = entity.getSongId();
        if (songId != null) {
            stmt.bindString(1, songId);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(2, songName);
        }
 
        String coverImageUrl = entity.getCoverImageUrl();
        if (coverImageUrl != null) {
            stmt.bindString(3, coverImageUrl);
        }
        stmt.bindLong(4, entity.getProgress());
 
        String mp3Url = entity.getMp3Url();
        if (mp3Url != null) {
            stmt.bindString(5, mp3Url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
 
        String singerName = entity.getSingerName();
        if (singerName != null) {
            stmt.bindString(7, singerName);
        }
 
        String tempo = entity.getTempo();
        if (tempo != null) {
            stmt.bindString(8, tempo);
        }
        stmt.bindLong(9, entity.getSize());
        stmt.bindLong(10, entity.getCollection() ? 1L: 0L);
        stmt.bindLong(11, entity.getListener() ? 1L: 0L);
        stmt.bindLong(12, entity.getImgProgress());
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(13, imgPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalSongs entity) {
        stmt.clearBindings();
 
        String songId = entity.getSongId();
        if (songId != null) {
            stmt.bindString(1, songId);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(2, songName);
        }
 
        String coverImageUrl = entity.getCoverImageUrl();
        if (coverImageUrl != null) {
            stmt.bindString(3, coverImageUrl);
        }
        stmt.bindLong(4, entity.getProgress());
 
        String mp3Url = entity.getMp3Url();
        if (mp3Url != null) {
            stmt.bindString(5, mp3Url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
 
        String singerName = entity.getSingerName();
        if (singerName != null) {
            stmt.bindString(7, singerName);
        }
 
        String tempo = entity.getTempo();
        if (tempo != null) {
            stmt.bindString(8, tempo);
        }
        stmt.bindLong(9, entity.getSize());
        stmt.bindLong(10, entity.getCollection() ? 1L: 0L);
        stmt.bindLong(11, entity.getListener() ? 1L: 0L);
        stmt.bindLong(12, entity.getImgProgress());
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(13, imgPath);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LocalSongs readEntity(Cursor cursor, int offset) {
        LocalSongs entity = new LocalSongs( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // songId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // songName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // coverImageUrl
            cursor.getInt(offset + 3), // progress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mp3Url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // singerName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tempo
            cursor.getInt(offset + 8), // size
            cursor.getShort(offset + 9) != 0, // collection
            cursor.getShort(offset + 10) != 0, // listener
            cursor.getInt(offset + 11), // imgProgress
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // imgPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalSongs entity, int offset) {
        entity.setSongId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSongName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCoverImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProgress(cursor.getInt(offset + 3));
        entity.setMp3Url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSingerName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTempo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSize(cursor.getInt(offset + 8));
        entity.setCollection(cursor.getShort(offset + 9) != 0);
        entity.setListener(cursor.getShort(offset + 10) != 0);
        entity.setImgProgress(cursor.getInt(offset + 11));
        entity.setImgPath(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LocalSongs entity, long rowId) {
        return entity.getSongId();
    }
    
    @Override
    public String getKey(LocalSongs entity) {
        if(entity != null) {
            return entity.getSongId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalSongs entity) {
        return entity.getSongId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
